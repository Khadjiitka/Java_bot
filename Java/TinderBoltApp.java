package com.javarush.telegram;

import java.util.ArrayList;
import java.util.List;

import org.telegram.telegrambots.meta.TelegramBotsApi;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import org.telegram.telegrambots.updatesreceivers.DefaultBotSession;

public class TinderBoltApp extends MultiSessionTelegramBot {
    public static final String TELEGRAM_BOT_NAME = System.getenv("TELEGRAM_BOT_NAME"); 
    public static final String TELEGRAM_BOT_TOKEN = System.getenv("TELEGRAM_BOT_TOKEN");
    public static final String OPEN_AI_TOKEN = System.getenv("OPEN_AI_TOKEN"); 
   
    public DialogMode mode = DialogMode.MAIN;
    private List<String> chat;
    private UserInfo myInfo;
    private int questionNumber;
    private UserInfo personInfo;

    public ChatGPTService gptService = new ChatGPTService(OPEN_AI_TOKEN);

    public TinderBoltApp() {
        super(TELEGRAM_BOT_NAME, TELEGRAM_BOT_TOKEN);
    }

    @Override
    public void onUpdateEventReceived(Update update) {
        // –æ—Å–Ω–æ–≤–Ω–∏–π —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –±–æ—Ç–∞ 
        String message = getMessageText(); //–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –∫–æ–º–∞–Ω–¥–æ—é
        switch (message)
        {
            case "/start" ->{
                mode = DialogMode.MAIN;
                showMainMenu(
                "–≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –±–æ—Ç–∞", "/start",
                "–≥–µ–Ω–µ—Ä–∞—Ü—ñ—è Tinder-–ø—Ä–æ—Ñ—ñ–ª—é üòé","/profile",
                "–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∑–Ω–∞–π–æ–º—Å—Ç–≤–∞ ü•∞","/opener",
                "–ª–∏—Å—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–¥ –≤–∞—à–æ–≥–æ —ñ–º–µ–Ω—ñ üòà","/message",
                "–õ–∏—Å—Ç—É–≤–∞–Ω–Ω—è –∑ –∑—ñ—Ä–∫–∞–º–∏ üî•","/date",
                "–ø–æ—Å—Ç–∞–≤–∏—Ç–∏ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è —á–∞—Ç—É GPT üß†","/gpt");
                sendPhotoMessage("main");
                String menu = loadMessage("main");
                sendTextMessage(menu);
                return;
            }
            case "/gpt" -> {
                mode = DialogMode.GPT;
                String gptMessage = loadMessage("gpt");
                sendTextMessage(gptMessage);
                sendPhotoMessage("gpt");
                return;
            }
            case "/date" -> {
                mode = DialogMode.DATE;
                String dateMessage = loadMessage("date");
                sendPhotoMessage("date");
                sendTextButtonsMessage(dateMessage,
                    "–ê—Ä—ñ–∞–Ω–∞ –ì—Ä–∞–Ω–¥–µ \uD83D\uDD25", "date_grande",
                    "–ú–∞—Ä–≥–æ –†–æ–±–±—ñ \uD83D\uDD25\uD83D\uDD25", "date_robbie",
                    "–ó–µ–Ω–¥–µ—è \uD83D\uDD25\uD83D\uDD25\uD83D\uDD25", "date_zendaya",
                    "–†–∞–π–∞–Ω –ì–æ—Å–ª—ñ–Ω–≥ \uD83D\uDE0E", "date_gosling",
                    "–¢–æ–º –•–∞—Ä–¥—ñ \uD83D\uDE0E\uD83D\uDE0E", "date_hardy");
                return;
            }
            case "/message" -> {
                mode = DialogMode.MESSAGE;
                sendPhotoMessage("message");
                String gptMessageHelper = loadMessage("message");
                sendTextMessage(gptMessageHelper);
                sendTextButtonMessage( gptMessageHelper, 
                        "–ù–∞—Å—Ç—É–ø–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è", "message_next",
                        "–ó–∞–ø—Ä–æ—Å–∏—Ç–∏ –Ω–∞ –ø–æ–±–∞—á–µ–Ω–Ω—è", "message_date");

                chat = new ArrayList<>();
                return;
            }
            case "/profile" -> {
                mode = DialogMode.PROFILE;
                sendPhotoMessage("profile");
                String profileMessage = loadMessage("message");
                sendTextMessage(profileMessage);

                myInfo = new UserInfo();
                questionNumber = 1;
                sendTextMessage("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è ");
                return;
            }
            case "/opener" -> {
                mode = DialogMode.OPENER;
                sendPhotoMessage("opener");
                String profileMessage = loadMessage("opener");
                sendTextMessage(profileMessage);

                personInfo = new UserInfo();
                questionNumber = 1;
                sendTextMessage("–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è ");
                return;
            }
        }

        switch (mode) {
            case GPT ->{
                String prompt = loadPrompt("gpt");
                Message msg = sendTextMessage("–î—Ä—É–∫—É—î...");
                String answer = gptService.sendMessage(prompt, message);
                updateTextMessage(msg, answer);
             
            }
            case DATE ->{
                String query = getCallbackQueryButtonKey();
                if (query.startsWith("date_")) 
                {
                    sendPhotoMessage(query);
                     String prompt = loadPrompt(query);
                    gptService.setPrompt(prompt);
                    return;
                }
                 Message msg = sendTextMessage("–ü–æ—á–µ–∫–∞–π");
                 String answer = gptService.addMessage(message); // –ª–∏—Å—Ç –≥–ø—Ç —É –Ω–∞—è–≤–Ω—ñ–π –≥—ñ–ª—Ü—ñ
                 updateTextMessage(msg, answer);
               
            }
            case MESSAGE ->{
                String query = getCallbackQueryButtonKey();
                if (query.startsWith("message_")) {
                    String prompt = loadPrompt(query);
                    String history = String.join("/n/n", chat);
                    Message msg = sendTextMessage("–î—Ä—É–∫—É—î...");
                    String answer = gptService.sendMessage(prompt, history);
                    updateTextMessage(msg, answer);// —Å–ø–æ—á–∞—Ç–∫—É msg, –∫–æ–ª–∏ answer –±—É–¥–µ –∑–≥–µ–Ω–µ—Ä, —Ç–æ –≤—ñ–Ω –∑–∞–º—ñ–Ω–∏—Ç—å msg
                }
            chat.add(message); //–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        
            }
            case PROFILE -> {
                if (questionNumber <= 6)
                {
                    askQuestion(message, myInfo, "profile");
                }
            }
            case OPENER -> {
                
                 if (questionNumber <= 6)
                {
                    askQuestion(message, personInfo, "opener");
                }
            }
        }
    }
    
    private void askQuestion(String message, UserInfo user, String profileName) // —Ñ–æ—Ä–º—É—î–º–æ –∞–Ω–∫–µ—Ç—É —á–µ—Ä–µ–∑ GPT
    {
        switch(questionNumber)
        {
            case 1 -> {
                user.name = message;
                questionNumber = 2;
           sendTextMessage("–í–≤–µ–¥—ñ—Ç—å –≤—ñ–∫: ");
            }
            case 2 -> {
                user.age = message;
                questionNumber = 3;
                sendTextMessage("–í–≤–µ–¥—ñ—Ç—å –º—ñ—Å—Ç–æ: ");
           
            }case 3 -> {
                user.city = message;
                questionNumber = 4;
                sendTextMessage("–í–≤–µ–¥—ñ—Ç—å –ø—Ä–æ—Ñ–µ—Å—ñ—é: ");
            
            }
            case 4 -> {
                user.occupation = message;
                questionNumber = 5;
                sendTextMessage("–í–≤–µ–¥—ñ—Ç—å —Ö–æ–±–±—ñ: ");
            
            }
            case 5 -> {
                user.hobby = message;
                questionNumber = 6;
                sendTextMessage("–í–≤–µ–¥—ñ—Ç—å —Ü—ñ–ª—ñ –¥–ª—è –∑–Ω–∞–π–æ–º—Å—Ç–≤–∞: ");
          
            }
            case 6 -> {
                user.goals= message;
                String prompt = loadPrompt(profileName); 
                Message msg = sendTextMessage("ChatGPT –¥—Ä—É–∫—É—î...");

                String answer = gptService.sendMessage(prompt, myInfo.toString());
                updateTextMessage(msg,answer);
            
            }

        }
    }

    public static void main(String[] args) throws TelegramApiException {
        TelegramBotsApi telegramBotsApi = new TelegramBotsApi(DefaultBotSession.class);
        telegramBotsApi.registerBot(new TinderBoltApp());
    }

    private void sendTextButtonMessage(String gptMessageHelper, String –Ω–∞—Å—Ç—É–ø–Ω–µ_–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, String message_next, String –∑–∞–ø—Ä–æ—Å–∏—Ç–∏_–Ω–∞_–ø–æ–±–∞—á–µ–Ω–Ω—è, String message_date) {
        throw new UnsupportedOperationException("Not supported yet.");
    }
}